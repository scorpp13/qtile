" ------------------------------------------------------------------------------
" Main settings
" ------------------------------------------------------------------------------

" Command used to edit files in various contexts.  The default is vim.
if executable('vim')
    set vicmd=vim
elseif executable('nvim')
    set vicmd=nvim
elseif executable('helix')
    set vicmd=hx
elseif executable('micro')
    set vicmd=micro
elseif $EDITOR != ''
    echo 'Note: using `'.$EDITOR.'` as an editor'
    let &vicmd = $EDITOR
endif

" This makes vifm perform file operations on its own instead of relying on
" standard utilities like `cp`.  While using `cp` and alike is a more universal
" solution, it's also much slower when processing large amounts of files and
" doesn't support progress measuring.
set syscalls

" Trash Directory
set trash

" Enable mouse
set mouse=a

" What should be saved automatically on restarting vifm.  Drop "savedirs"
" value if you don't want vifm to remember last visited directories for you.
set vifminfo=dhistory,chistory,savedirs,state,tui,shistory,
            \phistory,fhistory,dirstack,registers,bookmarks,bmarks

" This is how many directories to store in the directory history.
set history=100

" Automatically resolve symbolic links on l or Enter.
set nofollowlinks

" Natural sort of (version) numbers within text.
set sortnumbers

" Maximum number of changes that can be undone.
set undolevels=100

" Use Vim's format of help file (has highlighting and "hyperlinks").
" If you would rather use a plain text help file set novimhelp.
set vimhelp

" If you would like to run an executable file when you
" press Enter, l or Right Arrow, set this.
set norunexec

" Format for displaying time in file list. For example:
" TIME_STAMP_FORMAT=%m/%d-%H:%M
set timefmt='%d-%b-%Y_%H:%M'

" Show list of matches on tab completion in command-line mode
set wildmenu

" Display completions in a form of popup with descriptions of the matches
set wildstyle=popup

" Display suggestions in normal, visual and view modes for keys, marks and
" registers (at most 5 files).  In other view, when available.
set suggestoptions=normal,visual,view,otherpane,keys,marks,registers

" Ignore case in search patterns unless it contains at least one uppercase
" letter
set ignorecase
set smartcase

" Don't highlight search results automatically
set nohlsearch

" Use increment searching (search while typing)
set incsearch

" Try to leave some space from cursor to upper/lower border in lists
set scrolloff=4

" Don't do too many requests to slow file systems
if !has('win')
	set slowfs=curlftpfs
endif

" Set custom status line look
set statusline="%t%[ -> %T%] %6E %12A %=%d %5u:%g"

 colorscheme dracula
" colorscheme dwmlight
" colorscheme gruvbox
" colorscheme paper
" colorscheme papercolor-dark
" colorscheme papercolor-light
" colorscheme reicheltd-light

" ------------------------------------------------------------------------------
" Bookmarks
" ------------------------------------------------------------------------------

mark b ~/.backup
mark c ~/.config/
mark d ~/Downloads/
mark h ~/
mark g ~/Documents/GitLab/
mark l ~/.local
mark m /run/media/as/
mark p /etc/portage/
mark r /
mark s ~/Pictures/screenshots
mark u /usr
mark v ~/Videos/
mark w ~/Pictures/wallpapers

" ------------------------------------------------------------------------------
" Commands
" ------------------------------------------------------------------------------

" These are some of the macros that can be used in the action part:
"  %a for user arguments
"  %c for current file under the cursor
"  %C for current file under the cursor of inactive pane
"  %f for selected file(s)
"  %F for selected file(s) of inactive pane
"  %b is the same as %f %F
"  %r{x} for list of files in register {x}
"  %m runs the command in a menu window
"  %u uses command's output to build a file list
"  see `:help vifm-macros` and `:help vifm-filename-modifiers` for more

command! df df -h %m 2> /dev/null
command! diff vim -d %f %F
command! zip zip -r %c.zip %f
command! run !! ./%f
command! make !!make %a
command! mkcd :mkdir %a | cd %a
command! vgrep vim "+grep %a"
command! reload :write | restart full
command! link ln -s %d/%f %D
command! mount bashmount
command! extract xarchiver -d %a

" ------------------------------------------------------------------------------
" File types association
" ------------------------------------------------------------------------------

" :filetype pattern1,pattern2 defaultprogram,program2
" :fileviewer pattern1,pattern2 consoleviewer

fileviewer .git/
	\ git status %d %pu

fileviewer <image/gif>
	\ #ueberzug#image_no_cache %px %py %pw %ph
	\ %pc
	\ #ueberzug#clear
fileviewer <video/*>
	\ #ueberzug#video %px %py %pw %ph
	\ %pc
	\ #ueberzug#clear
fileviewer <image/*>
	\ #ueberzug#image %px %py %pw %ph
	" or \ #ueberzug#image_no_cache %px %py %pw %ph
	\ %pc
	\ #ueberzug#clear
fileviewer <audio/*>
	\ #ueberzug#audio %px %py %pw %ph
	\ %pc
	\ #ueberzug#clear
fileviewer <font/*>
	\ #ueberzug#djvu %px %py %pw %ph
	\ %pc
	\ #ueberzug#clear
fileviewer *.pdf
	\ #ueberzug#pdf %px %py %pw %ph
	\ %pc
	\ #ueberzug#clear
fileviewer *.epub
	\ #ueberzug#epub %px %py %pw %ph
	\ %pc
	\ #ueberzug#clear
fileviewer *.djvu
	\ #ueberzug#djvu %px %py %pw %ph
	\ %pc
	\ #ueberzug#clear
fileviewer *.cbz
	\ #ueberzug#cbz %px %py %pw %ph
	\ %pc
	\ #ueberzug#clear
fileviewer *.cbt
	\ #ueberzug#cbt %px %py %pw %ph %c
	\ %pc
	\ #ueberzug#clear
fileviewer *.cbr
	\ #ueberzug#cbr %px %py %pw %ph %c
	\ %pc
	\ #ueberzug#clear
fileviewer *.cb7
	\ #ueberzug#cb7 %px %py %pw %ph %c
	\ %pc
	\ #ueberzug#clear

" Audio
filetype {*.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus,
	\*.aac,*.mpga},
	\<audio/*>
"	\ {Play using ffplay}
"	\ ffplay -nodisp -hide_banner -autoexit %c,
	\ {Play using mpv}
	\ mpv %f %s

" Video
filextype {*.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
	\*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
	\*.as[fx],*.unknown_video},
	\<video/*>
"	\ {View using ffplay}
"	\ ffplay -fs -hide_banner -autoexit %f,
	\ {Play using mpv}
	\ mpv --fs %f %s

" Web
filextype {*.xhtml,*.html,*.htm},<text/html>
	\ {Open with vivaldi}
	\ vivaldi %f &

" Object
filetype {*.o},<application/x-object> nm %f | less

" Man page
filetype {*.[1-8]},<text/troff> man ./%c
fileviewer {*.[1-8]},<text/troff> man ./%c | col -b

" Images
filextype {*.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm},<image/*>
	\ {View in feh}
	\ feh -FZ %d --start-at %d/%c 2>/dev/null

" MD5
filetype *.md5
	\ {Check MD5 hash sum}
	\ md5sum -c %f %S

" SHA1
filetype *.sha1
	\ {Check SHA1 hash sum}
	\ sha1sum -c %f %S

" SHA256
filetype *.sha256
	\ {Check SHA256 hash sum}
	\ sha256sum -c %f %S

" SHA512
filetype *.sha512
	\ {Check SHA512 hash sum}
	\ sha512sum -c %f %S

" GPG signature
filetype {*.asc},<application/pgp-signature>
	\ {Check signature}
	\ !!gpg --verify %c

" Torrent
filetype {*.torrent},<application/x-bittorrent> qbittorrent %f &
fileviewer {*.torrent},<application/x-bittorrent> qbittorrent %c

" FuseZipMount
filetype {*.zip,*.jar,*.war,*.ear,*.oxt,*.apkg},
	\<application/zip,application/java-archive> xarchiver %f &
	\ {View contents}
	\ unzip -l %f | less,
	\ {Extract here}
	\ unzip %c
fileviewer *.zip,*.jar,*.war,*.ear,*.oxt unzip -l %f

" ArchiveMount
filetype {*.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz,*.tar.xz,*.txz,*.tar.zst,
	\*.tzst},
	\<application/x-tar> xarchiver %f &
	\ {Mount with archivemount}
	\ FUSE_MOUNT|archivemount %SOURCE_FILE %DESTINATION_DIR
fileviewer *.tgz,*.tar.gz tar -tzf %c
fileviewer *.tar.bz2,*.tbz2 tar -tjf %c
fileviewer *.tar.xz,*.txz tar -tJf %c
fileviewer *.tar.zst,*.tzst tar -t --zstd -f %c
fileviewer {*.tar},<application/x-tar> tar -tf %c

" Rar2FsMount and rar archives
filetype {*.rar},<application/x-rar> xarchiver %f &
	\ {Mount with rar2fs}
	\ FUSE_MOUNT|rar2fs %SOURCE_FILE %DESTINATION_DIR
fileviewer {*.rar},<application/x-rar> unrar v %c

" IsoMount
filetype {*.iso},<application/x-iso9660-image>
	\ {Mount with fuseiso}
	\ FUSE_MOUNT|fuseiso %SOURCE_FILE %DESTINATION_DIR

" SshMount
filetype *.ssh
	\ {Mount with sshfs}
	\ FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR %FOREGROUND

" FtpMount
filetype *.ftp
	\ {Mount with curlftpfs}
	\ FUSE_MOUNT2|curlftpfs -o ftp_port=-,,disable_eprt %PARAM %DESTINATION_DIR %FOREGROUND

" Fuse7z and 7z archives
filetype {*.7z},<application/x-7z-compressed> xarchiver %f &
	\ {Mount with fuse-7z}
	\ FUSE_MOUNT|fuse-7z %SOURCE_FILE %DESTINATION_DIR
fileviewer {*.7z},<application/x-7z-compressed> 7z l %c

" Office files
filextype {*.odt,*.doc,*.docx,*.xls,*.xlsx,*.odp,*.pptx,*.ppt},
	\<application/vnd.openxmlformats-officedocument.*,
	\application/msword,
	\application/vnd.ms-excel>
	\ libreoffice %f &
fileviewer {*.doc},<application/msword> catdoc %c
fileviewer {*.docx},
	\<application/
	\vnd.openxmlformats-officedocument.wordprocessingml.document>
	\ docx2txt.pl %f -

" Enable ls colors in folder preview
fileviewer */ ls --color=always                                                                  
fileviewer .*/ ls --color=always

" Syntax highlighting in preview
"
" 256-color terminal
" fileviewer *.[ch],*.[ch]pp highlight -O xterm256 -s dante --syntax c %c
" fileviewer Makefile,Makefile.* highlight -O xterm256 -s dante --syntax make %c
"
" 16-color terminal
" fileviewer *.c,*.h highlight -O ansi -s dante %c
"
" Automatic detection
fileviewer *[^/] pygmentize -O style=monokai -f console256 -g

" ------------------------------------------------------------------------------
" Panel configuration examples
" ------------------------------------------------------------------------------

" Customize view columns a bit (enable ellipsis for truncated file names)
" set viewcolumns=-{name}..,6{}.

" Show vertical border
" set fillchars=vborder:â”‚

" Filter-out build and temporary files
" filter! {*.lo,*.o,*.d,*.class,*.pyc,*.pyo,.*~}

" ------------------------------------------------------------------------------
" Sample keyboard mappings
" ------------------------------------------------------------------------------

" Start shell in current directory
"nnoremap s :shell<cr>
nnoremap s :!fish <cr>

" Display sorting dialog
nnoremap S :sort<cr>

" Toggle visibility of preview window
nnoremap w :view<cr>
vnoremap w :view<cr>gv

" Open file in micro
nnoremap o :!micro %f<cr>

" Open file in mousepad
nnoremap e :!mousepad %f<cr>

" Open file in the background using its default program
nnoremap gb :file &<cr>l

" Interaction with system clipboard
if has('win')
	" Yank current directory path to Windows clipboard with forward slashes
	nnoremap yp :!echo %"d:gs!\!/! %i | clip<cr>
	" Yank path to current file to Windows clipboard with forward slashes
	nnoremap yf :!echo %"c:gs!\!/! %i | clip<cr>
elseif $WAYLAND_DISPLAY
	if executable('wl-copy')
		" Yank current directory path into primary and selection clipboards
		nnoremap yd :!echo -n %d | wl-copy %i &&
			\ echo -n %d | wl-copy -p %i<cr>
		" Yank current file path into into primary and selection clipboards
		nnoremap yf :!echo -n %c:p | wl-copy %i &&
			\ echo -n %c:p | wl-copy -p %i<cr>
endif
elseif $DISPLAY
	if executable('xclip')
		" Yank current directory path into the clipboard
		nnoremap yd :!echo %d | xclip %i<cr>
		" Yank current file path into the clipboard
		nnoremap yf :!echo %c:p | xclip %i<cr>
	elseif executable('xsel')
		" Yank current directory path into primary and selection clipboards
		nnoremap yd :!echo -n %d | xsel --input --primary %i &&
			\ echo -n %d | xsel --clipboard --input %i<cr>
		" Yank current file path into into primary and selection clipboards
		nnoremap yf :!echo -n %c:p | xsel --input --primary %i &&
			\ echo -n %c:p | xsel --clipboard --input %i<cr>
endif
endif

" Mappings for faster renaming
nnoremap I cw<c-a>
nnoremap cc cw<c-u>
nnoremap A cw
nnoremap - <C-w>5<
nnoremap + <C-w>5>

" As above, but without the file extension
" nnoremap I cW<c-a>
" nnoremap cc cW<c-u>
" nnoremap A cW

" Open console in current directory
if $DISPLAY && executable('xterm')
    nnoremap ,t :!xterm &<cr>
elseif $TERMINAL
    nnoremap ,t :!$TERMINAL &<cr>
endif

" Open editor to edit vifmrc and apply settings after returning to vifm
nnoremap ,c :write | edit $MYVIFMRC | restart full<cr>

" Toggle wrap setting on ,w key
nnoremap ,w :set wrap!<cr>

" Choose files
nnoremap <space> t

" Midnight commander alike mappings
nnoremap <f3> :!less %f<cr>
nnoremap <f4> :edit<cr>
nnoremap <f5> :copy<cr>
nnoremap <f6> :move<cr>
nnoremap <f7> :mkdir<space>
nnoremap <f8> :delete<cr>
" Open current directory in the other pane
nnoremap <a-i> :sync<cr>
" Open directory under cursor in the other pane
nnoremap <a-o> :sync %c<cr>
" Swap panes
nnoremap <c-u> <c-w>x

" ------------------------------------------------------------------------------
" Various customization examples
" ------------------------------------------------------------------------------

" Add additional place to look for executables
" let $PATH = $HOME.'/.vifm/scripts:'.$PATH

